---
title: Functional Programming & Computability Theory
date: 3/28/2017
tags: [math, functional programming, computability theory]
---

In my last log entry I talked about a practical application of Ramda.js in production. In this entry, I would like to touch more on the theoretical side of functional programming.

Functional programming is getting a lot of newfound use in this modern age of technology. However, the idea behind it has been around since the 1930s when Alonzo Church, Kurt Godel, and Alan Turing all independently discovered what we know today as **lambda calculus**. I say discovered because these men, who all worked independently from one another, all came to the **same exact conclusion** within **one year of each other**. That's crazy. And this was after *2000 years of waiting* for an effective computability theory!

> It's like buses! You wait 2000 years for a definition of effective computability, and then three come along at once.
>
> -- <cite>Philip Wadler, [Propositions as Types](https://www.youtube.com/watch?v=IOiZatlZtGU)</cite>

What is the computability theory you might ask? Well, it all comes down to recursion.
